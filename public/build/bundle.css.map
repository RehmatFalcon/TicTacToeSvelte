{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../GameCell.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import GameBoard from \"./GameBoard.svelte\";\n  let gameMatrix = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n  let gameMoves = [];\n  let winner = null;\n  let player = 1;\n  let gameOver = false;\n  const nextPlayer = () => (player == 1 ? 2 : 1);\n  const alreadySelected = (rowIndex, colIndex) =>\n    gameMatrix[rowIndex][colIndex] !== 0;\n  const gameWon = () => {\n    winner = player;\n    gameOver = true;\n  };\n  const verifyGame = (rowIndex, colIndex) => {\n    const rowConquered = gameMatrix[rowIndex].every(x => x === player);\n    if (rowConquered) {\n      gameWon();\n      return;\n    }\n    const colConquered = gameMatrix.every(x => x[colIndex] === player);\n    if (colConquered) {\n      gameWon();\n      return;\n    }\n    if (rowIndex === colIndex) {\n      const diagonal = gameMatrix.every(\n        (r, idx) => gameMatrix[idx][idx] === player\n      );\n      if (diagonal) {\n        gameWon();\n        return;\n      }\n    }\n    const noMoves = gameMatrix.every(row => row.every(x => x !== 0));\n    if (noMoves) {\n      gameOver = true;\n    }\n  };\n\n  const recordMove = (rowIndex, colIndex) => {\n    gameMoves = [\n      ...gameMoves,\n      {\n        row: rowIndex,\n        col: colIndex,\n        player: player\n      }\n    ];\n  };\n\n  const selectCell = (rowIndex, colIndex) => {\n    if (gameOver) return;\n    if (alreadySelected(rowIndex, colIndex)) return;\n    gameMatrix[rowIndex][colIndex] = player;\n    recordMove(rowIndex, colIndex);\n    verifyGame(rowIndex, colIndex);\n    player = nextPlayer();\n  };\n\n  const restartGame = () => {\n    gameMoves = [];\n    gameMatrix = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n    player = 1;\n    winner = null;\n    gameOver = false;\n  };\n</script>\n\n<style>\n  #app {\n    display: flex;\n    background: #fff;\n    border-radius: 4px;\n    padding: 20px;\n    transition: all 0.2s;\n  }\n  #playground {\n    flex: 1 auto;\n  }\n  button {\n\tpadding: 10px;\n  \tbackground: rgba(200, 100, 23, .8);\n  }\n</style>\n\n<div id=\"app\">\n  <div id=\"playground\">\n    Player {player}'s turn\n    <GameBoard {gameMatrix} onCellSelect={selectCell} />\n    <br />\n    {#if gameOver}\n      Game Over.\n      {#if winner != null}\n        Winner : Player {winner}\n      {:else}No more Moves Left.{/if}\n      <button on:click={restartGame}>Play Again</button>\n    {/if}\n  </div>\n  <div id=\"history\">\n\t<ul>\n\t\t{#each gameMoves as move}\n\t\t<li>\n\t\t\tPlayer {move.player} chose Row : {move.row} , Col : {move.col}\n\t\t</li>\n\t\t{/each}\n\t</ul>\n  </div>\n</div>\n",
    "<script>\nexport let rowIndex, colIndex, currentStatus, onCellSelect;\n\tconst handleClick = () => {\n\t\tonCellSelect(rowIndex, colIndex);\n\t};\n</script>\n<style>\n.red {\n  background: red;\n}\ntd {\n  height: 30px;\n  width: 30px;\n  border: 2px solid blue;\n}\n.green {\n  background: green;\n}\n</style>\n\n<td class=\"{currentStatus == 1 ? 'red' : currentStatus == 2 ? 'green' : ''}\" on:click={handleClick}>\n\n</td>"
  ],
  "names": [],
  "mappings": "AAsEE,IAAI,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,GAAG,CAAC,IAAI,AACtB,CAAC,AACD,WAAW,eAAC,CAAC,AACX,IAAI,CAAE,CAAC,CAAC,IAAI,AACd,CAAC,AACD,MAAM,eAAC,CAAC,AACT,OAAO,CAAE,IAAI,CACX,UAAU,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AACnC,CAAC;AC5EH,IAAI,cAAC,CAAC,AACJ,UAAU,CAAE,GAAG,AACjB,CAAC,AACD,EAAE,cAAC,CAAC,AACF,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AACxB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,UAAU,CAAE,KAAK,AACnB,CAAC"
}